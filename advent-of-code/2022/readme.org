#+title: Advent of Code 2022

Solutions for the [[https://adventofcode.com/2022/][advent of code 2022]] using Haskell

*Solutions:*
#+begin_src emacs-lisp :exports results :results table 
  (require 'org-extra)
  (org-extra-generate-index-table "Day")
#+end_src

#+RESULTS:
|---+---+---+---+---+---|
| [[readme.org#Day-1][1]] | [[readme.org#Day-2][2]] | [[readme.org#Day-3][3]] | [[readme.org#Day-4][4]] | [[readme.org#Day-5][5]] | [[readme.org#Day-6][6]] |
|---+---+---+---+---+---|




** Imports and definitions
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  import Data.List.Split
  import Data.List
  import Data.Maybe
#+end_src

#+RESULTS:

** Utils
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  :{

  -- list / tuples helpers

  listToPair [a, b] = (a, b)
  listToTrio [a,b,c] = (a,b,c)

  trd (_,_, c) = c

  -- update element in list
  type ElIndex = Int
  update :: ElIndex -> a -> [a] -> [a]
  update _ _ [] = []
  update 0 a (_:xs) = a : xs
  update n a (x:xs) =
    if n < 0
      then (x : xs)
      else x : update (n - 1) a xs 

  -- TypeClass to define cyclic elements
  class (Enum a, Eq a, Bounded a) => Cyclic a where
    next :: a -> a
    next el
      | el == maxBound = minBound
      | otherwise = succ el
    prev :: a -> a
    prev el
      | el == minBound = maxBound
      | otherwise = pred el



  -- Finite Queue structure and functions
  type QueueMaxSize = Int
  data FiniteQueue a = FiniteQueue QueueMaxSize [a]

  instance (Show a) => Show (FiniteQueue a) where
    show (FiniteQueue maxSize list) =
      "{" ++ len ++ "/" ++ show maxSize ++ "}: " ++ show list
      where
        len = (show . length $ list)

  emptyFQ :: Int -> FiniteQueue a
  emptyFQ maxSize = FiniteQueue maxSize []

  singletonFQ :: Int -> a -> FiniteQueue a
  singletonFQ maxSize a = FiniteQueue maxSize [a]

  fromListFQ :: Int -> [a] -> FiniteQueue a
  fromListFQ n list = FiniteQueue n list

  pushFQ :: a -> FiniteQueue a -> FiniteQueue a
  pushFQ el (FiniteQueue maxSize list) =
    let appended = el : list
        cons = fromListFQ maxSize
     in if length list == maxSize
          then cons (init $ el : list)
          else cons (el : list)

  toListFQ :: FiniteQueue a -> [a]
  toListFQ (FiniteQueue _ list) = list

  lengthFQ :: FiniteQueue a -> Int
  lengthFQ = length . toListFQ

  :}
#+end_src

#+RESULTS:

** Day 1
[[https://adventofcode.com/2022/day/1][Calorie Counting]]

*** Part one
#+name: day-one-part-one
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  getElvesRaw = splitOn "\n\n"

  getElfCalories = sum . map read . words

  getElvesCalories = map getElfCalories . getElvesRaw

  findMaxCal = maximum . getElvesCalories

  fmap findMaxCal $ readFile "./2022/inputs/day-01.txt"
#+end_src

#+RESULTS: day-one-part-one
: 
:  74394

*** Part two

#+name: day-one-part-two
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  descSort = sortBy (flip compare)

  findTopThreeSum = sum . take 3 . descSort . getElvesCalories

  fmap findTopThreeSum $ readFile "./2022/inputs/day-01.txt"
#+end_src

#+RESULTS: day-one-part-two
: 
:  212836

** Day 2
[[https://adventofcode.com/2022/day/2][Rock, Paper Scissors]]

*** Part one
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  :{
  data Move
    = Rock
    | Paper
    | Scissors
    deriving (Show, Enum, Eq, Ord, Bounded)

  instance Cyclic Move
  
  data GameResult
    = Win
    | Draw
    | Lose
    deriving (Show)

  -- Parsing input
  parseMove :: String -> Move
  parseMove "A" = Rock
  parseMove "X" = Rock
  parseMove "B" = Paper
  parseMove "Y" = Paper
  parseMove "C" = Scissors
  parseMove "Z" = Scissors

  parseLine :: String -> (Move, Move)  
  parseLine = listToPair . map parseMove . words

  parse :: String -> [(Move, Move)]
  parse = map parseLine . lines


  moveValue :: Move -> Int
  moveValue = (+ 1) . fromEnum

  hand :: (Move , Move) -> GameResult
  hand (m1, m2) 
    | m2 == m1 = Draw
    | m2 == prev m1 = Lose
    | m2 == next m1 = Win

  handValue :: GameResult -> Int
  handValue Draw = 3
  handValue Win = 6
  handValue Lose = 0

  round :: (Move , Move) -> Int
  round (m1, m2) = moveValue m2 + gameValue
    where gameValue = handValue $ hand (m1, m2)

  game :: [(Move,Move)] -> Int
  game = sum . map round

  :}

  fmap (game . parse) $ readFile "./2022/inputs/day-02.txt"


#+end_src

#+RESULTS:
: 
:  14297

*** Part two
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
   :{

   chooseResult :: String -> GameResult
   chooseResult "X" = Lose
   chooseResult "Y" = Draw
   chooseResult "Z" = Win

   chooseFigureTo :: GameResult -> (Move -> Move)
   chooseFigureTo Lose = prev
   chooseFigureTo Draw = id
   chooseFigureTo Win = next

   parseMoves :: [String] -> (Move, Move)
   parseMoves [m1, m2] = (move1, move2)
     where move1 = parseMove m1
           move2 = chooseFigureTo (chooseResult m2) move1

   parseLine2 :: String -> (Move, Move)
   parseLine2 = parseMoves . words

   parse2 :: String -> [(Move, Move)]
   parse2 = map parseLine2 . lines

   :}

  fmap (game . parse2) $ readFile "./2022/inputs/day-02.txt"
#+end_src

#+RESULTS:
: 
:  10498

** Day 3
[[https://adventofcode.com/2022/day/3][Rucksack reorganization]]

*** Part One
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  :{

  type Compartment = String
  type Rucksack = (Compartment, Compartment)

  parseLine :: String -> Rucksack
  parseLine line = (fstCompartment, sndCompartment)
   where
     size = (flip div 2) . length $ line
     fstCompartment = take size line
     sndCompartment = drop size line

  parse :: String -> [Rucksack]
  parse = map parseLine . lines

  findRepeated :: Rucksack -> Char
  findRepeated (fstCmp, sndCmp) = head [x | x <- sndCmp , x `elem` fstCmp]

  calcPriority :: Char -> Maybe Int
  calcPriority = fmap (+1) . flip elemIndex (['a'..'z'] <> ['A'..'Z'])

  calcTotal :: [Rucksack] -> Maybe Int
  calcTotal = fmap sum . sequence . map (calcPriority . findRepeated)
    
  :}

  fmap (calcTotal . parse) $ readFile "./2022/inputs/day-03.txt"
  

#+end_src

#+RESULTS:
: 
:  Just 7826

*** Part two

#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  :{

  type ElfGroup = [String]

  parse2 :: String -> [ElfGroup]
  parse2 = chunksOf 3 . lines

  findRepeated :: ElfGroup ->  Char
  findRepeated [a, b, c] = head [x | x<-a, x `elem` b, x `elem` c]

  calcBadges :: [ElfGroup] -> Maybe Int
  calcBadges = fmap sum . sequence . map calcPriority . map findRepeated

  :}

  fmap (calcBadges . parse2) $ readFile "./2022/inputs/day-03.txt"
#+end_src

#+RESULTS:
: 
:  Just 2577

** Day 4
[[https://adventofcode.com/2022/day/4][Camp Cleanup]]

*** Part One
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  :{

  type Section = [Int]
  type Assignment = [Section]
  
  parseAssignment :: String -> Section
  parseAssignment = (\[a,b] -> [a..b]) . map read . splitOn "-"

  parseLine :: String -> Assignment
  parseLine = map parseAssignment . splitOn ","

  parse :: String -> [Assignment]
  parse = map parseLine . lines

  isFullyOverlapped :: Assignment -> Bool
  isFullyOverlapped [a, b] = aIsInB || bIsInA
    where
      aIsInB = (head a) `elem` b && (last a) `elem` b
      bIsInA = (head b) `elem` a && (last b) `elem` a

  countFullOverlaps :: [Assignment] -> Int
  countFullOverlaps = length . filter id . map isFullyOverlapped

  :}

  fmap (countFullOverlaps . parse) $ readFile "./2022/inputs/day-04.txt"
#+end_src

#+RESULTS:
: 
:  462

*** Part Two
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  :{
  
  isOverlapped :: Assignment -> Bool
  isOverlapped [a, b] = aOverlapsB || bOverlapsA
    where
      aOverlapsB = (head a) `elem` b || (last a) `elem` b
      bOverlapsA = (head b) `elem` a || (last b) `elem` a
    

  countOverlaps :: [Assignment] -> Int
  countOverlaps = length . filter id . map isOverlapped


  :}

  fmap (countOverlaps . parse) $ readFile "./2022/inputs/day-04.txt"
#+end_src

#+RESULTS:
: 
:  835

** Day 5
[[https://adventofcode.com/2022/day/5][Supply Stacks]]
*** Part One

#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  :{

  type Position = Int
  type Quantity = Int
  type Command = (Quantity, Position, Position)
  type Crates = String
  type Stacks = [String]
  type Stack = String
  type MoveCratesFn = Stack -> Crates -> Stack


  parseElem :: String -> String
  parseElem el = [x | x <- el, x `elem` ['A' .. 'Z']]

  parseRow :: [String] -> Stack
  parseRow = map head . filter (\el -> el /= "") . map parseElem

  parseMatrix :: String -> Stacks
  parseMatrix = map parseRow . transpose . map (chunksOf 4) . init . lines

  parseCommand :: String -> Command
  parseCommand =
    listToTrio .
    map read .
    filter ((> 0) . length) .
    map (\w -> [c | c <- w, c `elem` "1234567890"]) .
    words

  parseCommands :: String -> [Command]
  parseCommands = map parseCommand . lines

  getStack :: Stacks -> Position -> Stack
  getStack stacks pos = stacks !! (pos - 1)

  updateStack :: Position -> Stack -> Stacks -> Stacks
  updateStack pos stack stacks = update (pos - 1) stack stacks

  moveCrates :: MoveCratesFn
  moveCrates = foldl (\acc val -> val : acc)

  move :: MoveCratesFn -> Stacks -> Command -> Stacks
  move moveCratesFn stacks (qtity, from, to) = newStacks
    where
      [fromStack, toStack] = map (getStack stacks) [from, to]
      (crates, newFromStack) = splitAt qtity fromStack
      newToStack = moveCratesFn toStack crates
      newStacks =
        (updateStack from newFromStack) .
        (updateStack to newToStack) $
        stacks

  finalStack :: MoveCratesFn -> Stacks -> [Command] -> Stacks
  finalStack moveCratesFn = foldl (move moveCratesFn)

  getTopCrates :: Stacks -> Crates
  getTopCrates = map head

  main :: MoveCratesFn -> IO ()
  main moveCratesFn = do
    [inputMatrix, inputCmds] <-
      fmap (splitOn "\n\n") $ readFile "./2022/inputs/day-05.txt"
    let matrix = parseMatrix inputMatrix
    let commands = parseCommands inputCmds
    putStrLn . getTopCrates . finalStack moveCratesFn matrix $ commands

  :}

  main moveCrates
#+end_src

#+RESULTS:
: 
:  MQTPGLLDN

*** Part two

#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  :{

  moveCratesAtOnce :: MoveCratesFn
  moveCratesAtOnce = flip (<>)

  :}

  main moveCratesAtOnce
#+end_src

#+RESULTS:
: 
:  LVZPSTTCZ

** Day 6
[[https://adventofcode.com/2022/day/5][Tuning Trouble]]

** Part one
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
   :{
   type CurrIndex = Int
   type Index = Maybe Int
   type Counter = (CurrIndex, FiniteQueue Char, Index)


   updateIndexOnce :: Index -> Int -> Index
   updateIndexOnce (Just a) _ = Just a
   updateIndexOnce Nothing a = Just a

   hasRepeated :: String -> Bool
   hasRepeated str = not $ foldl (\acc val -> acc && length [x | x <- str, x == val] == 1) True str

   countMarker :: Counter -> Char -> Counter
   countMarker (currIndex, q, index) el = 
     if lengthFQ q < 4 || (hasRepeated . toListFQ $ q)
     then (currIndex + 1, pushFQ el q, index)
     else (currIndex + 1, pushFQ el q, updateIndexOnce index currIndex)

   findIndex :: QueueMaxSize -> String -> Maybe Int
   findIndex maxSize = trd . foldl countMarker initialCount
     where 
       initialQueue = (emptyFQ maxSize) :: FiniteQueue Char
       initialCount = (0, initialQueue, Nothing)

   :}


  fmap (findIndex 4) $ readFile "./2022/inputs/day-06.txt"
#+end_src

#+RESULTS:
: 
:  Just 1282

** Part two
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  fmap (findIndex 14) $ readFile "./2022/inputs/day-06.txt"
    
#+end_src

#+RESULTS:
: Just 3513

