#+title: Project Euler solutions
#+options: tex:t

In this file I will solve problems from [[https://projecteuler.net/archives][Project Euler]] using Elixir
lang.

** Reusable modules
*** Prime module
#+begin_src elixir :exports code :results output 
  defmodule Prime do
    defp ceil_sqrt(n), do: n |> :math.sqrt() |> ceil

    defp possible_factors(n), do: 2..ceil_sqrt(n)

    def divides?(a, b), do: rem(b, a) == 0

    def prime?(2), do: true
    def prime?(n), do: n |> possible_factors |> Enum.filter(&divides?(&1, n)) |> (&(&1 == [])).()

    def primes do
      Stream.concat(2..2, Stream.iterate(3, fn n -> n + 2 end)) |> Stream.filter(&prime?/1)
    end

    def nth_prime(n) do
      primes() |> Stream.drop(n - 1) |> Enum.take(1) |> hd
    end

    def take(n), do: primes() |> Enum.take(n)

    def take_while(func), do: primes() |> Stream.take_while(func) |> Enum.to_list()

    def possible_prime_factors(n) do
      max_val = ceil_sqrt(n)
      primes() |> Stream.take_while(fn el -> el <= max_val end) |> Enum.to_list()
    end
  end
#+end_src

#+RESULTS:
: [33mwarning: [0mredefining module Prime (current version defined in memory)
:   iex:1
: 
: {:module, Prime,
:  <<70, 79, 82, 49, 0, 0, 15, 52, 66, 69, 65, 77, 65, 116, 85, 56, 0, 0, 1, 195,
:    0, 0, 0, 46, 12, 69, 108, 105, 120, 105, 114, 46, 80, 114, 105, 109, 101, 8,
:    95, 95, 105, 110, 102, 111, 95, 95, 10, ...>>, {:possible_prime_factors, 1}}

*** Number Theory Module
#+begin_src elixir :exports code :results output 
  defmodule NumberTheory do
    def gcd(a, 0), do: a
    def gcd(0, a), do: a

    def gcd(a, b), do: gcd(min(a, b), rem(max(a, b), min(a, b)))

    def lcm(a, b), do: div(a * b, gcd(a, b))
  end
#+end_src

#+RESULTS:
: [33mwarning: [0mredefining module NumberTheory (current version defined in memory)
:   iex:1
: 
: {:module, NumberTheory,
:  <<70, 79, 82, 49, 0, 0, 6, 240, 66, 69, 65, 77, 65, 116, 85, 56, 0, 0, 0, 185,
:    0, 0, 0, 21, 19, 69, 108, 105, 120, 105, 114, 46, 78, 117, 109, 98, 101, 114,
:    84, 104, 101, 111, 114, 121, 8, 95, 95, ...>>, {:lcm, 2}}

*** Set Module

#+begin_src elixir :exports code :results output 
  defmodule Set do
    def cartesian_prod(set_a, set_b) do
      Stream.flat_map(set_a, fn x -> Stream.map(set_b, fn y -> {x, y} end) end)
    end
  end
#+end_src

#+RESULTS:
: [33mwarning: [0mredefining module Set (current version defined in memory)
:   iex:1
: 
: {:module, Set,
:  <<70, 79, 82, 49, 0, 0, 6, 188, 66, 69, 65, 77, 65, 116, 85, 56, 0, 0, 0, 242,
:    0, 0, 0, 20, 10, 69, 108, 105, 120, 105, 114, 46, 83, 101, 116, 8, 95, 95,
:    105, 110, 102, 111, 95, 95, 10, 97, 116, ...>>, {:cartesian_prod, 2}}


** Problem 1
*Find the sum of all the multiples of 3 or 5 below 1000.*

#+begin_src elixir :exports both :results output 
  multiple_of_3_or_5 = fn n -> rem(n, 5) * rem(n, 3) == 0 end
  1..999 |> Enum.filter(multiple_of_3_or_5) |> Enum.sum()
#+end_src

#+RESULTS:
: 233168

** Problem 2

*By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.*

#+begin_src elixir :exports both :results output 
  require Integer

  defmodule Ex2 do
    @limit 4_000_000

    defp fib(list) do
      curr = list |> Enum.take(2) |> Enum.sum()

      if curr < @limit do
        fib([curr | list])
      else
        list
      end
    end

    defp even?(x), do: rem(x, 2) == 0

    def fib_even_sum() do
      [1, 1] |> fib |> Enum.filter(&even?/1) |> Enum.sum()
    end
  end

  Ex2.fib_even_sum()
#+end_src

#+RESULTS:
: 4613732

** Problem 3

*What is the largest prime factor of the number 600851475143?*

#+begin_src elixir :exports both :results output 
  largest_prime_factor = fn n ->
    n
    |> Prime.possible_prime_factors()
    |> Enum.filter(&Prime.divides?(&1, n))
    |> List.last()
  end

  largest_prime_factor.(600_851_475_143)
#+end_src

#+RESULTS:
: 6857

** Problem 4

*Find the largest palindrome made from the product of two 3-digit numbers.*

#+begin_src elixir :exports both :results output 
  palindrome? = fn n ->
    str = Integer.to_string(n)
    str == String.reverse(str)
  end

  numbers = 999..100

  Stream.zip_with(numbers, numbers, &(&1 * &2)) |> Stream.filter(palindrome?) |> Enum.take(1) |> hd

#+end_src

#+RESULTS:
: 698896

** Problem 5
*What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?*

#+begin_src elixir :exports both :results output 
  1..20 |> Enum.reduce(1, &NumberTheory.lcm/2)
#+end_src

#+RESULTS:
: 232792560

** Problem 6
*Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.*

#+begin_src elixir :exports both :results output 
  square_of_the_sum = fn n -> div(n * (n + 1), 2) ** 2 end

  sum_of_the_squares = fn n -> div(n * (n + 1) * (2 * n + 1), 6) end

  square_of_the_sum.(100) - sum_of_the_squares.(100)
#+end_src

#+RESULTS:
: 25164150

** Problem 7
*What is the 10 001st prime number?*

#+begin_src elixir :exports both :results output 
  Prime.nth_prime 10_001
#+end_src

#+RESULTS:
: 104743

** Problem 8

*Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?*

#+begin_src elixir :exports both :results output 
  number = 7_316_717_653_133_062_491_922_511_967_442_657_474_235_534_919_493_496_983_520_312_774_506_326_239_578_318_016_984_801_869_478_851_843_858_615_607_891_129_494_954_595_017_379_583_319_528_532_088_055_111_254_069_874_715_852_386_305_071_569_329_096_329_522_744_304_355_766_896_648_950_445_244_523_161_731_856_403_098_711_121_722_383_113_622_298_934_233_803_081_353_362_766_142_828_064_444_866_452_387_493_035_890_729_629_049_156_044_077_239_071_381_051_585_930_796_086_670_172_427_121_883_998_797_908_792_274_921_901_699_720_888_093_776_657_273_330_010_533_678_812_202_354_218_097_512_545_405_947_522_435_258_490_771_167_055_601_360_483_958_644_670_632_441_572_215_539_753_697_817_977_846_174_064_955_149_290_862_569_321_978_468_622_482_839_722_413_756_570_560_574_902_614_079_729_686_524_145_351_004_748_216_637_048_440_319_989_000_889_524_345_065_854_122_758_866_688_116_427_171_479_924_442_928_230_863_465_674_813_919_123_162_824_586_178_664_583_591_245_665_294_765_456_828_489_128_831_426_076_900_422_421_902_267_105_562_632_111_110_937_054_421_750_694_165_896_040_807_198_403_850_962_455_444_362_981_230_987_879_927_244_284_909_188_845_801_561_660_979_191_338_754_992_005_240_636_899_125_607_176_060_588_611_646_710_940_507_754_100_225_698_315_520_005_593_572_972_571_636_269_561_882_670_428_252_483_600_823_257_530_420_752_963_450

  fst = fn {a, _} -> a end
  snd = fn {_, a} -> a end

  split_integer = fn n ->
    n |> Integer.to_string() |> String.split("", trim: true) |> Enum.map(&String.to_integer/1)
  end

  number_list = number |> split_integer.()

  el_mul = fn idx ->
    Enum.drop(number_list, idx) |> Enum.take(13) |> (&{&1, Enum.product(&1)}).()
  end

  0..999 |> Enum.map(el_mul) |> Enum.max(fn a, b -> snd.(a) > snd.(b) end)
#+end_src

#+RESULTS:
: {[5, 5, 7, 6, 6, 8, 9, 6, 6, 4, 8, 9, 5], 23514624000}

** Problem 9

*There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.*

Solution:

For $m,n$, a pitagorean triplet can be defined as:

$a = m^2 - n^2$

$b = 2mn$

$c = m^2 + n^2$


Therefore $a+b+c = 2m^2 + 2mn = 1000 \therefore m^2 +mn = 500$

We want $abc = (m^2 - n^2)(2mn)(m^2+n^2) = 2 m^5 n - 2 m n^5 = 2mn(m^4 - n^4)$

#+begin_src elixir :exports both :results output 
  nums = 1..500

  get_abc = fn {m, n} -> {m * m - n * n, 2 * m * n, m * m + n * n} end

  check_abc = fn {a, b, c} -> a > 0 and b > 0 and c > 0 end

  check_mn = fn {a, b} ->
    a ** 2 + a * b === 500 and {a, b} |> get_abc.() |> check_abc.()
  end

  calc_abc = fn {a, b, c} -> {{a, b, c}, a * b * c} end

  Set.cartesian_prod(nums, nums)
  |> Stream.filter(check_mn)
  |> Stream.map(get_abc)
  |> Stream.map(calc_abc)
  |> Enum.take(1)
  |> hd
#+end_src

#+RESULTS:
: {{375, 200, 425}, 31875000}


** Problem 10
*Find the sum of all the primes below two million.*

#+begin_src elixir :exports both :results output 
  Prime.take_while(&(&1 < 2_000_000)) |> Enum.sum()  
#+end_src

#+RESULTS:
: 142913828922

** Problem 11

*In the 20Ã—20 grid below*

#+begin_src elixir :exports both :code output 
  number_grid = [
    [08, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 08],
    [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00],
    [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65],
    [52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91],
    [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
    [24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
    [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
    [67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 08, 40, 91, 66, 49, 94, 21],
    [24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
    [21, 36, 23, 09, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95],
    [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 09, 53, 56, 92],
    [16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57],
    [86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
    [19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40],
    [04, 52, 08, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
    [88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
    [04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 08, 46, 29, 32, 40, 62, 76, 36],
    [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16],
    [20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54],
    [01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48]
  ]
#+end_src

#+RESULTS:
#+begin_example
[
  [8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],
  [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],
  [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36,
   65],
  [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],
  [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13,
   80],
  [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
  [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64,
   70],
  [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],
  [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63,
   72],
  [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],
  [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],
  [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],
  [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
  [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],
  [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
  [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53,
   69],
  [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],
  [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36,
   16],
  [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],
  [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]
]
#+end_example

*What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20Ã—20 grid?*

#+begin_src elixir :exports both :results output 
  at = fn {x, y} ->
    if x < 0 or y < 0 do
      0
    else
      number_grid |> Enum.at(x, []) |> Enum.at(y, 0)
    end
  end

  north = fn {x, y} -> 0..3 |> Enum.map(&{x - &1, y}) end
  south = fn {x, y} -> 0..3 |> Enum.map(&{x + &1, y}) end
  east = fn {x, y} -> 0..3 |> Enum.map(&{x, y - &1}) end
  west = fn {x, y} -> 0..3 |> Enum.map(&{x, y + &1}) end
  northwest = fn {x, y} -> 0..3 |> Enum.map(&{x - &1, y + &1}) end
  northeast = fn {x, y} -> 0..3 |> Enum.map(&{x - &1, y - &1}) end
  southwest = fn {x, y} -> 0..3 |> Enum.map(&{x + &1, y + &1}) end
  southeast = fn {x, y} -> 0..3 |> Enum.map(&{x + &1, y - &1}) end

  directions = fn idx ->
    [north, south, east, west, northeast, northwest, southeast, southwest]
    |> Enum.map(fn f -> f.(idx) end)
  end

  multiply = fn idxs -> idxs |> Enum.map(at) |> Enum.product() end

  max_at_idx = fn idx -> idx |> directions.() |> Enum.map(multiply) |> Enum.max() end

  idxs = 0..19

  Set.cartesian_prod(idxs, idxs)
  |> Enum.to_list()
  |> Enum.map(max_at_idx)
  |> Enum.max()
#+end_src

#+RESULTS:
: 70600674









