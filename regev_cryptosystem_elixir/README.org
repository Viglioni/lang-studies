* regev-crypto-system
** About
   An implementation of the cryptosystem proposed by Oded Regev

   [[https://people.csail.mit.edu/vinodv/6892-Fall2013/regev.pdf][On Lattices, Learning with Errors, Random Linear Codes, and Cryptography]]

** Build and exec
* COMMENT Analysis
*** Input   

*** Output
    
    

*** With more security parameters

* How the algorithm works
** Phi beta PDF
   First we need to define the probability density function (PDF) ~phi_β~:
   - ~phi_β~ is normal distribution with ~mean = 0~ and ~standard deviation = β/√(2*π)~
   - The discretization of a sample is done by multiplying it by ~p~, rounding and applying ~mod p~
   - We will define ~χ~ using ~β = 1/((√n) log^2 n)~
** Ecryption schema
    ~m~ is defined by ~p~ and ~n~: ~m = (1+ε)(n+1)*log(p)~
    - *Private key*: choose uniformly ~s~ from (~Zp)^n~
    - *Public key*:
      - Choose uniformly ~m~ vectors ~a_1, ..., a_m~ from (~Zp)^n~
      - Choose ~m~ errors ~e_i~ from ~Zp~ according to ~χ~
      - Define ~b_i = <a_i , s> + e_i~, where ~s~ is the private key
      - The public key is ~(a_i, b_i)_m~
    - *Encrypt a bit*:
      - Choose randomly a subset ~S~ of ~{1,...,m}~
      - The encryption is the pair ~(sum(a_i), sum(b_i))~ if the *bit is 0*, *else* the result is ~(sum(a_i), floor(p/2) +  sum(b_i))~, where ~i~ is an element of ~S~ in both cases
    - *Decrypt a bit*:
      - Calculate ~r = b - <a,s>~ where ~(a,b)~ is the encrypted bit
      - if ~r~ is closer to 0 than to ~floor(p/2) mod p~, then the *bit is 0*, else the *bit is 1*
** Correctness proof
    Since the errors sampled from ~χ~ are from a normal PDF with mean 0 and very small standard deviation, with ~m~ big enough, ~sum e_i~ is close to 0.
    The *0 encrypted bit* is:
    #+begin_src text :exports both 
      (a,b) = (sum(a_i), sum(b_i)) then
      r = b - <a,s>
        = sum(b_i) - < sum(a_i), s >
        = sum(b_i) - sum( <a_i, s> )
        = sum(<a_i , s> + e_i) - sum( <a_i, s> )
        = sum(<a_i , s>) + sum(e_i) - sum( <a_i, s> )
        = sum(e_i)
    #+end_src

    Since ~sum(e_i)~ is close to 0, the *bit must be 0*.

    When the *encrypted bit is 1* we have the same, except ~r = sum(e_i) + floor(p/2)~, with the same argument, ~r~ is close to ~floor(p/2)~, then the *bit must be 1*.
