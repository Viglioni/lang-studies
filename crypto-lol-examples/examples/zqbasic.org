#+title: ZqBasic
[[https://hackage.haskell.org/package/lol-0.7.0.0/docs/Crypto-Lol-Types.html#t:ZqBasic][
Hackage]]

[[https://github.com/cpeikert/Lol/blob/master/lol-apps/Crypto/Lol/Applications/Examples/SymmBGV.hs][Lol-apps example]]

** Imports
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  :set -package numeric-prelude
  :set -XDataKinds
  :set -XPolyKinds
  :set -XRebindableSyntax     
  import Crypto.Lol.Types 
  import Crypto.Lol 
  import Algebra.Ring ((^))
  import qualified Prelude as P -- to avoid conflicts
  import System.Random (randomIO)
#+end_src

#+RESULTS:
** Creating the Zq type
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  type Zq q = ZqBasic q Int64
#+end_src

#+RESULTS:
** Creating Z2, Z3 etc
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  type Z2 = Zq 2
  zeroZ2  = 0 :: Z2
  oneZ2   = 1 :: Z2
  fiveZ2  = 5 :: Z2

  [zeroZ2, oneZ2, fiveZ2]
#+end_src

#+RESULTS:
: 
:  [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 1}]

Notice that the lib has some predefined prime types that can be used here:

#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  type Z13 = Zq Prime13

  (10 :: Z13) * (2 :: Z13)
#+end_src

#+RESULTS:
: 
:  ZqB {unZqB = 7}

** Basic operations
*** +
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  [zeroZ2 + zeroZ2, zeroZ2 + oneZ2, oneZ2 + oneZ2]
#+end_src

#+RESULTS:
: [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 0}]

*** *
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  [zeroZ2 * zeroZ2, zeroZ2 * oneZ2, oneZ2 * oneZ2]
#+end_src

#+RESULTS:
: [ZqB {unZqB = 0},ZqB {unZqB = 0},ZqB {unZqB = 1}]

*** /
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
 [zeroZ2 / oneZ2 , oneZ2 / oneZ2]
#+end_src

#+RESULTS:
: [ZqB {unZqB = 0},ZqB {unZqB = 1}]

*** Power
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  type Z50       = Zq 50
  nineZ50        = 9 :: Z50
  squaredNineZ50 = nineZ50 ^- 2 
  cubeNineZ50    = nineZ50 ^- 3
  [squaredNineZ50, nineZ50 * nineZ50, cubeNineZ50, nineZ50 * nineZ50 * nineZ50]
#+end_src

#+RESULTS:
: 
:  [ZqB {unZqB = 31},ZqB {unZqB = 31},ZqB {unZqB = 29},ZqB {unZqB = 29}]

*** Negate 
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  negate nineZ50
#+end_src

#+RESULTS:
: ZqB {unZqB = 41}

** Type safety

#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  type Z3 = Zq 3
  zeroZ3  = 0 :: Z3

  -- should throw type error:
  zeroZ3 + zeroZ2
#+end_src

#+RESULTS:
: 
:  
: <interactive>:106:10-15: error:
:     • Couldn't match type ‘2’ with ‘3’
:       Expected type: Z3
:         Actual type: Z2
:     • In the second argument of ‘(+)’, namely ‘zeroZ2’
:       In the expression: zeroZ3 + zeroZ2
:       In an equation for ‘it’: it = zeroZ3 + zeroZ2

** Inverse, when exists

#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  nineZ50inv = recip nineZ50

  [nineZ50, nineZ50inv , nineZ50inv * nineZ50]

#+end_src

#+RESULTS:
: 
:  [ZqB {unZqB = 9},ZqB {unZqB = 39},ZqB {unZqB = 1}]

An element n of a ring Zq has inverse if and only if ~gcd n q = 1~
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  -- should throw
  recip (5 :: Z50)
#+end_src

#+RESULTS:
: 
: ZqB {unZqB = *** Exception: ZqB.recip fail: 5	50
: CallStack (from HasCallStack):
:   error, called at ./Crypto/Lol/Types/Unsafe/ZqBasic.hs:219:27 in lol-0.7.0.1-9IqnkYuIm434kiBNKkZDxM:Crypto.Lol.Types.Unsafe.ZqBasic

** Extract number from type
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  lift nineZ50
#+end_src

#+RESULTS:
: 9

** Elements from a ring
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
values :: [Z13]
#+end_src

#+RESULTS:
: [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 2},ZqB {unZqB = 3},ZqB {unZqB = 4},ZqB {unZqB = 5},ZqB {unZqB = 6},ZqB {unZqB = 7},ZqB {unZqB = 8},ZqB {unZqB = 9},ZqB {unZqB = 10},ZqB {unZqB = 11},ZqB {unZqB = 12}]

** Random element
The [[https://hackage.haskell.org/package/lol-0.7.0.0/docs/Crypto-Lol-Types-Unsafe-ZqBasic.html#i:id:ZqBasic:Random:39][functions]] from ~System.Random~ can be used with ~ZqBasic~:
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
randomIO :: (IO Z13)
#+end_src

#+RESULTS:
: ZqB {unZqB = 11}
