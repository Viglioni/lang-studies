#+title: Finite Field

[[https://hackage.haskell.org/package/lol-0.7.0.0/docs/Crypto-Lol-Types-FiniteField.html][Hackage]]

** Imports
   #+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
     :set -package numeric-prelude
     :set -XDataKinds
     :set -XPolyKinds
     :set -XRebindableSyntax
     import Algebra.Ring ((^))
     import Crypto.Lol hiding ((^))
     import Crypto.Lol.Types
     import Crypto.Lol.Types.FiniteField
     import System.Random
   #+end_src

   #+RESULTS:

** Creating GFs
*** GF types
   #+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
     -- First we need to create Zq's
     type Zq q = ZqBasic q Int64
     type Z2 = Zq Prime2
     type Z3 = Zq Prime3

     type GF8 = GF Z2 3
     type GF9 = GF Z3 2

   #+end_src

   #+RESULTS:

*** GF elements
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  a8 = fromList [0, 0, 0] :: GF8
  b8 = fromList [0, 0, 1] :: GF8
  c8 = fromList [0, 1, 0] :: GF8
  d8 = fromList [0, 1, 1] :: GF8

  a9 = fromList [0, 0] :: GF9
  b9 = fromList [0, 1] :: GF9
  c9 = fromList [0, 2] :: GF9
  d9 = fromList [1, 0] :: GF9

  print "x + x^2 :: GF8"
  d8
  print "2x :: GF9"
  c9

#+end_src

#+RESULTS:
: 
:  "x + x^2 :: GF8"
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 1}])
: 2x :: GF9
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 2}])
*** GF elements to list
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  toList d9
  map lift $ toList d9
#+end_src

#+RESULTS:
: 
:  "x + x^2 :: GF8"
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 1}])
: 2x :: GF9
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 2}])

** Basic operations

*** +
    #+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
      print "GF8:"
      a8 + a8
      a8 + b8
      c8 + d8
      print "GF9:"
      a9 + c9
      c9 + b9
    #+end_src

    #+RESULTS:
    : [ZqB {unZqB = 1},ZqB {unZqB = 0}]
    : [1,0]

*** *
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
c8
d8
c8 * d8
#+end_src

#+RESULTS:
: GF8:
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 0},ZqB {unZqB = 0}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 0},ZqB {unZqB = 1}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 0},ZqB {unZqB = 1}])
: GF9:
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 2}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 0}])

*** /
Notice that the lib provides only Field instances for ~GF(2^n)~ where ~n in [1, 128]~ so we can't multiple, divide or inverse ~GF9~ elements.
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  c8 * d8
#+end_src

#+RESULTS:
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 0}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 1}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 1},ZqB {unZqB = 1},ZqB {unZqB = 1}])

*** Power
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  c8 ^- 4
#+end_src

#+RESULTS:
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 1},ZqB {unZqB = 1},ZqB {unZqB = 1}])

*** Negade
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  print "GF8"
  mapM_ print $ map negate [a8, b8, c8, d8]
  print "GF9"
  mapM_ print $ map negate [a9, b9, c9, d9]
#+end_src

#+RESULTS:
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 1}])

** Elements
The same here for instances of ~Enumerable~.
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  print "GF8 elements"
  mapM_ print (values :: [GF8])
#+end_src

#+RESULTS:
#+begin_example
GF8
GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 0},ZqB {unZqB = 0}])
GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 0},ZqB {unZqB = 1}])
GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 0}])
GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 1}])
GF9
GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 0}])
GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 2}])
GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 1}])
GF (Polynomial.fromCoeffs [ZqB {unZqB = 2},ZqB {unZqB = 0}])
#+end_example

** Random element
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  randomIO :: IO GF8
  randomIO :: IO GF9
#+end_src

#+RESULTS:
: GF8 elements
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 0},ZqB {unZqB = 0}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 0},ZqB {unZqB = 1}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 0}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 1}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 1},ZqB {unZqB = 0},ZqB {unZqB = 0}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 1},ZqB {unZqB = 0},ZqB {unZqB = 1}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 1},ZqB {unZqB = 1},ZqB {unZqB = 0}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 1},ZqB {unZqB = 1},ZqB {unZqB = 1}])

** Size of GF
Instances  for ~GF(2^n)~ 
#+begin_src haskell :exports both :results output :post org-babel-haskell-formatter(*this*)
  size :: Tagged GF8 Int
  untag (size :: Tagged GF8 Int)
#+end_src

#+RESULTS:
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 1},ZqB {unZqB = 1}])
: GF (Polynomial.fromCoeffs [ZqB {unZqB = 0},ZqB {unZqB = 0}])


